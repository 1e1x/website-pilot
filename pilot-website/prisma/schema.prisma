// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// ==========================================
// USER & AUTHENTICATION MODELS
// ==========================================

model User {
    id         String   @id @default(cuid())
    name       String?
    email      String?  @unique
    password   String? // Hashed password if not using OAuth exclusively
    image      String? // Profile image URL
    bio        String?  @db.Text
    location   String?
    website    String?
    joinedAt   DateTime @default(now())
    lastActive DateTime @default(now())
    role       UserRole @default(MEMBER)

    // Social links
    twitter  String?
    linkedin String?
    github   String?

    // NextAuth.js required relations
    accounts Account[]
    sessions Session[]

    // Platform relations
    ownedProjects      Project[]       @relation("ProjectOwner")
    projectMemberships ProjectMember[]
    userSkills         UserSkill[]
    likes              Like[]
    comments           Comment[]
    //   follows            Follow[]             @relation("UserFollows")
    //   followers          Follow[]             @relation("UserFollowers")
    //   eventRegistrations EventRegistration[]
    //   contestTeams       ContestTeamMember[]
    posts              Post[]
    //   sentMessages       Message[]            @relation("MessageSender")
    //   receivedMessages   Message[]            @relation("MessageReceiver")
    //   notifications      Notification[]
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt

    @@map("users")
}

enum UserRole {
    ADMIN
    MEMBER
    MENTOR
    STUDENT
}

// Skills & expertise
model Skill {
    id          String       @id @default(cuid())
    name        String       @unique
    description String?      @db.Text
    userSkills  UserSkill[]
    projectTags ProjectTag[]

    @@map("skills")
}

model UserSkill {
    id          String @id @default(cuid())
    userId      String
    skillId     String
    proficiency Int? // Optional 1-5 rating

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

    @@unique([userId, skillId])
    @@map("user_skills")
}

// ==========================================
// PROJECT MODELS
// ==========================================

model Project {
    id          String            @id @default(cuid())
    title       String
    description String            @db.Text
    status      ProjectStatus     @default(ACTIVE)
    visibility  ProjectVisibility @default(PUBLIC)
    ownerId     String
    heroImage   String? // URL to hero image
    website     String?
    githubUrl   String?

    // Metrics
    viewCount    Int @default(0)
    likeCount    Int @default(0)
    commentCount Int @default(0)

    // Relations
    owner      User            @relation("ProjectOwner", fields: [ownerId], references: [id])
    members    ProjectMember[]
    tags       ProjectTag[]
    media      ProjectMedia[]
    likes      Like[]
    comments   Comment[]
    milestones Milestone[]
    updates    ProjectUpdate[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("projects")
}

enum ProjectStatus {
    DRAFT
    ACTIVE
    COMPLETED
    ARCHIVED
}

enum ProjectVisibility {
    PUBLIC
    PRIVATE
    TEAM_ONLY
}

model ProjectMember {
    id        String       @id @default(cuid())
    userId    String
    projectId String
    role      ProjectRole
    status    MemberStatus @default(ACTIVE)

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, projectId])
    @@map("project_members")
}

enum ProjectRole {
    OWNER
    COLLABORATOR
    CONTRIBUTOR
    VIEWER
}

enum MemberStatus {
    INVITED
    ACTIVE
    DECLINED
    REMOVED
}

model ProjectTag {
    id        String @id @default(cuid())
    projectId String
    skillId   String

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

    @@unique([projectId, skillId])
    @@map("project_tags")
}

model ProjectMedia {
    id          String    @id @default(cuid())
    projectId   String
    title       String?
    description String?   @db.Text
    mediaType   MediaType
    url         String
    order       Int       @default(0)

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@map("project_media")
}

enum MediaType {
    IMAGE
    VIDEO
    DOCUMENT
    OTHER
}

model Milestone {
    id          String    @id @default(cuid())
    projectId   String
    title       String
    description String?   @db.Text
    dueDate     DateTime?
    completed   Boolean   @default(false)
    completedAt DateTime?

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("milestones")
}

model ProjectUpdate {
    id        String @id @default(cuid())
    projectId String
    title     String
    content   String @db.Text

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@map("project_updates")
}

// ==========================================
// SOCIAL FEATURE MODELS
// ==========================================

model Like {
    id       String       @id @default(cuid())
    userId   String
    itemType LikeableType
    itemId   String // This will store the ID of the liked item

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project? @relation(fields: [itemId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@unique([userId, itemType, itemId])
    @@map("likes")
}

enum LikeableType {
    PROJECT
    COMMENT
    POST
}

model Comment {
    id       String          @id @default(cuid())
    content  String          @db.Text
    userId   String
    itemType CommentableType
    itemId   String // The ID of the commented item
    parentId String? // For threaded comments

    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project?  @relation(fields: [itemId], references: [id], onDelete: Cascade)
    parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
    replies Comment[] @relation("CommentReplies")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("comments")
}

enum CommentableType {
    PROJECT
    POST
    UPDATE
}

// model Follow {
//   id          String   @id @default(cuid())
//   followerId  String   // Who is following
//   followingId String   // Who is being followed

//   follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
//   following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

//   createdAt   DateTime @default(now())

//   @@unique([followerId, followingId])
//   @@map("follows")
// }

// ==========================================
// ARENA/COMPETITIONS MODELS
// ==========================================

// model Contest {
//   id          String        @id @default(cuid())
//   name        String
//   description String        @db.Text
//   rules       String?       @db.Text
//   status      ContestStatus @default(UPCOMING)
//   startDate   DateTime
//   endDate     DateTime

//   // Prize info
//   prizeDescription String?   @db.Text
//   prizeAmount      Decimal?  @db.Decimal(10, 2)

//   // Relations
//   teams           ContestTeam[]

//   createdAt       DateTime     @default(now())
//   updatedAt       DateTime     @updatedAt

//   @@map("contests")
// }

// enum ContestStatus {
//   UPCOMING
//   LIVE
//   COMPLETED
//   CANCELLED
// }

// model ContestTeam {
//   id          String              @id @default(cuid())
//   contestId   String
//   name        String
//   description String?             @db.Text
//   projectId   String?             // Optional link to a project

//   contest     Contest             @relation(fields: [contestId], references: [id], onDelete: Cascade)
//   members     ContestTeamMember[]

//   createdAt   DateTime            @default(now())
//   updatedAt   DateTime            @updatedAt

//   @@map("contest_teams")
// }

// model ContestTeamMember {
//   id           String      @id @default(cuid())
//   teamId       String
//   userId       String
//   role         String?

//   team         ContestTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
//   user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([teamId, userId])
//   @@map("contest_team_members")
// }

// ==========================================
// WORKSHOP & EVENT MODELS
// ==========================================

// model Event {
//   id              String            @id @default(cuid())
//   title           String
//   description     String            @db.Text
//   eventType       EventType
//   startDateTime   DateTime
//   endDateTime     DateTime
//   location        String?           // Physical location or "Online"
//   maxAttendees    Int?
//   coverImage      String?

//   // Relations
//   registrations   EventRegistration[]

//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt

//   @@map("events")
// }

// enum EventType {
//   WORKSHOP
//   MEETUP
//   HACKATHON
//   CONFERENCE
//   OTHER
// }

// model EventRegistration {
//   id        String   @id @default(cuid())
//   eventId   String
//   userId    String
//   status    RegistrationStatus @default(REGISTERED)
//   attended  Boolean  @default(false)

//   event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())

//   @@unique([eventId, userId])
//   @@map("event_registrations")
// }

// enum RegistrationStatus {
//   REGISTERED
//   WAITLISTED
//   CANCELLED
// }

// ==========================================
// CONTENT MANAGEMENT MODELS
// ==========================================

model Post {
    id        String  @id @default(cuid())
    title     String
    content   String  @db.Text
    authorId  String
    published Boolean @default(false)

    author User @relation(fields: [authorId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("posts")
}

// ==========================================
// COMMUNICATION MODELS
// ==========================================

// model Message {
//   id          String    @id @default(cuid())
//   content     String    @db.Text
//   senderId    String
//   receiverId  String
//   read        Boolean   @default(false)
//   readAt      DateTime?

//   sender      User      @relation("MessageSender", fields: [senderId], references: [id])
//   receiver    User      @relation("MessageReceiver", fields: [receiverId], references: [id])

//   createdAt   DateTime  @default(now())

//   @@map("messages")
// }

// model Notification {
//   id        String           @id @default(cuid())
//   userId    String
//   type      NotificationType
//   message   String
//   read      Boolean          @default(false)
//   data      Json?            // Additional data relevant to the notification

//   user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime         @default(now())

//   @@map("notifications")
// }

// enum NotificationType {
//   PROJECT_INVITE
//   MENTION
//   COMMENT
//   LIKE
//   FOLLOW
//   EVENT
//   MESSAGE
//   SYSTEM
// }

// ==========================================
// SYSTEM CONFIGURATION MODELS
// ==========================================

model SiteSettings {
    id           String  @id @default("singleton")
    siteName     String  @default("1e1x")
    siteTagline  String?
    logoUrl      String?
    faviconUrl   String?
    primaryColor String?
    accentColor  String?

    // Feature flags
    enableEvents   Boolean @default(true)
    enableContests Boolean @default(true)
    enableBlog     Boolean @default(true)

    updatedAt DateTime @updatedAt

    @@map("site_settings")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
